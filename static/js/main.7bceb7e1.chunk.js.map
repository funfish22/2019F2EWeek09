{"version":3,"sources":["pages/default/Home/index.tsx","pages/default/Home/Home.tsx","pages/App/Router.tsx","resources/components/atoms/Logo/Logo.tsx","resources/components/atoms/Logo/index.tsx","pages/App/Menu.tsx","pages/App/App.tsx","pages/App/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","props","state","Router","path","exact","component","Logo","LogoTitle","styled","h1","Menu","MenuRoot","div","App","Container","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAEeA,ECIF,SAACC,EAAcC,GACxB,OACI,oCACI,8CCOGC,MAVf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,M,oYCF7C,IAMeO,EANF,SAACN,EAAcC,GACxB,OACI,kBAACM,EAAD,kBAMFA,EAAYC,IAAOC,GAAV,KCbAH,I,2KCOf,IAQeI,EARF,SAACV,EAAcC,GACxB,OACI,kBAACU,EAAD,KACI,kBAAC,EAAD,QAONA,EAAWH,IAAOI,IAAV,K,2FCRd,IAWeC,EAXH,SAACb,EAAcC,GACvB,OACI,kBAAC,IAAD,KACI,kBAACa,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SAQVA,EAAYN,IAAOI,IAAV,KCtBAC,ICkBAA,E,iLAPX,OACE,kBAAC,EAAD,U,GALYE,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7bceb7e1.chunk.js","sourcesContent":["import Home from './Home';\n\nexport default Home;","import React from 'react';\n\ninterface Props { }\n\ninterface State { }\n\nconst Home = (props: Props, state: State) => {\n    return(\n        <>\n            <h1>首頁</h1>\n        </>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\nimport Home from 'pages/default/Home';\n\n\nfunction Router() {\n    return(\n        <Switch>\n            <Route path=\"/\" exact component={Home} />\n\n            {/* <Route component={PageNotFound} /> */}\n        </Switch>\n    )\n}\n\nexport default Router;","import React from 'react';\nimport styled from 'styled-components';\n\ninterface Props {}\n\ninterface State {}\n\nconst Logo = (props: Props, state: State) => {\n    return(\n        <LogoTitle>FreeNote</LogoTitle>\n    )\n}\n\nexport default Logo;\n\nconst LogoTitle = styled.h1`\n    display: inline-block;\n    font-size: 22px;\n    position: relative;\n    color: #fff;\n\n    &:after{\n        position: absolute;\n        content: '';\n        width: 6px;\n        height: 6px;\n        border-radius: 50%;\n        background-color: #fff;\n        bottom: 8px;\n        right: -10px;\n    }\n`;","import Logo from './Logo';\n\nexport default Logo;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Logo from 'resources/components/atoms/Logo'\n\ninterface Props { }\n\ninterface State { }\n\nconst Menu = (props: Props, state: State) => {\n    return(\n        <MenuRoot>\n            <Logo/>\n        </MenuRoot>\n    )\n}\n\nexport default Menu;\n\nconst MenuRoot = styled.div`\n    width: 256px;\n    min-height: 100vh;\n    background-color: #2F419B;\n    padding: 50px 33px;\n`;","import React from 'react';\nimport { HashRouter, BrowserRouter} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Router from './Router';\nimport Menu from './Menu';\n\ninterface Props { }\n\ninterface State { }\n\nconst App = (props: Props, state: State) => {\n    return(\n        <HashRouter>\n            <Container>\n                <Menu/>\n                <Router/>\n            </Container>\n        </HashRouter>\n    )\n}\n\nexport default App;\n\nconst Container = styled.div`\n    display: flex;\n`;","import App from './App';\n\nexport default App;","import React from 'react';\r\n\r\nimport Entrance from 'pages/App'\r\n\r\n\r\ninterface Props { }\r\n\r\ninterface State { }\r\n\r\nclass App extends React.Component<Props, State> {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Entrance/>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport './reset.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}